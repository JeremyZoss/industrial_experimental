#!/usr/bin/env python

from __future__ import print_function   

import sys    
import os      

import macros

def print_menu():
  print("-------Motoman Package Generator-------")
  print("1. Generate support package")
  print("2. Generate additional moveit files")
  print("3. Exit")

def generate_moveit_package(model):
  print("Generating additional moveit files for model: ", model)
  moveit_package = "motoman_" + model + "_moveit_config"
  support_package = "motoman_" + model + "_support"
  generate_controller_manager_launch(moveit_package, model)
  generate_planning_execution_launch(moveit_package, support_package, model)
  touch(moveit_package + "/config/controllers.yaml")
  print("TODO: FILL IN CONTROLLERS YAML")
  print("TODO: CHECK JOINT LIMITS YAML FOR ACCEL/DECEL LIMITS")

def generate_support_package(model, author, author_email, version):
  print("Generating support directories for model: ", model)
  package = "motoman_" + model + "_support"
  #Populate package root directory
  mkdir(package)
  generate_cmakelist(package)
  generate_package_xml(package, model, author, author_email, version)
  #Populate package/config directory
  mkdir(package + "/config")
  print("Generating joint names yaml")
  touch(package + "/config/joint_names_" + model + ".yaml")
  #Populate package/launch directory
  mkdir(package + "/launch")
  generate_load_launch(package, model)
  generate_streaming_launch(package, model)
  generate_visualize_launch(package, model)
  generate_test_model_launch(package, model)
  #Populate package/meshes directory
  mkdir(package + "/meshes")
  mkdir(package + "/meshes/" + model)
  mkdir(package + "/meshes/" + model + "/collision")
  mkdir(package + "/meshes/" + model + "/visual")
  #Populate package/test directory
  mkdir(package + "/test")
  generate_launch_test(package, model)
  mkdir(package + "/urdf")
  touch(package + "/urdf/" + model + ".urdf")
  touch(package + "/urdf/" + model + ".xacro")
  touch(package + "/urdf/" + model + "_macro.xacro")

  print("TODO: FILL IN JOINT_NAMES YAML")
  print("TODO: ADD COLLISION/VISUAL MESHES")
  print("TODO: FILL IN URDF MACROS/URDFS")

def mkdir(path):
  try:
    os.mkdir(path)

  except OSError:
    print("Directory: " + path + " already exists, ignoring")

def touch(path):
  open(path, 'a').close()

def generate_cmakelist(package):
  print("Generate CMakeLists.txt")
  cmake_text = macros.cmakelist(package)
  fd = open(package + "/CMakeLists.txt", 'w')
  fd.write(cmake_text)
  
def generate_package_xml(package, model, author, author_email, version):
  print("Generating package.xml")
  package_text = macros.package_xml(package, model, author, author_email, version)
  fd = open(package + "/package.xml", 'w')
  fd.write(package_text)

def generate_load_launch(package, model):
  print("Generating load_" + model + ".launch")
  launch_text = macros.load_launch(package, model)
  fd = open(package + "/launch/load_" + model + ".launch", 'w')
  fd.write(launch_text)

def generate_streaming_launch(package, model):
  print("Generating robot_streaming_interface_" + model + ".launch")
  launch_text = macros.streaming_launch(package, model)
  fd = open(package + "/launch/robot_interface_streaming_" + model + ".launch", 'w')
  fd.write(launch_text)

def generate_visualize_launch(package, model):
  print("Generating robot_state_visualize_" + model + ".launch")
  launch_text = macros.state_vis_launch(package, model)
  fd = open(package + "/launch/robot_state_visualize_" + model + ".launch", 'w')
  fd.write(launch_text)

def generate_test_model_launch(package, model):
  print("Generating test_" + model + ".launch")
  launch_text = macros.test_model_launch(package, model)
  fd = open(package + "/launch/test_" + model + ".launch", 'w')
  fd.write(launch_text)

def generate_launch_test(package, model):
  print("Generating launch_test.xml")
  text = macros.launch_test(package, model)
  fd = open(package + "/test/launch_test.xml", 'w')
  fd.write(text)

def generate_controller_manager_launch(moveit_package, model):
  print("Generating motoman_" + model + "_moveit_controller_manager.launch.xml")
  text = macros.controller_manager_launch(moveit_package, model)
  fd = open(package + "/launch/motoman_" + model + "_moveit_controller_manager.launch.xml", 'w')
  fd.write(text)

def generate_planning_execution_launch(moveit_package, support_package, model):
  print("Generating moveit_planning_execution.launch")
  text = macros.planning_execution_launch(moveit_package, support_package, model)
  fd = open(package + "/launch/moveit_planning_execution.launch", 'w')
  fd = write(text)

def main():

  if len(sys.argv) < 5:
    print("Robot model, author, email & version required")
    sys.exit(1);

  model = sys.argv[1]
  author = sys.argv[2]
  author_email = sys.argv[3]
  version = sys.argv[4]

  print("Parsing model: ", model, " from command line")

  print_menu()
  item = input("Select an option: ")

  if item == 1:
    generate_support_package(model, author, author_email, version)
  elif item == 2:
    generate_moveit_package(model)


if __name__ == '__main__':
  print("This script can be used to auto-generate motoman robot packages")
  main()
    


